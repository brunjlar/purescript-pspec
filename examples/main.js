// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_10) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_18) {
        if (_18 instanceof LT) {
            return "LT";
        };
        if (_18 instanceof GT) {
            return "GT";
        };
        if (_18 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_11) {
        if (_11) {
            return "true";
        };
        if (!_11) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_25) {
        return function (_26) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_6) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_6)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_14) {
        return function (_15) {
            return false;
        };
    }, function (_12) {
        return function (_13) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_19) {
        return function (_20) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_21) {
        return function (_22) {
            if (!_21 && !_22) {
                return EQ.value;
            };
            if (!_21 && _22) {
                return LT.value;
            };
            if (_21 && _22) {
                return EQ.value;
            };
            if (_21 && !_22) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var $$const = function (_6) {
        return function (_7) {
            return _6;
        };
    };
    var $$void = function (__dict_Functor_9) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _277 = compare(__dict_Ord_11)(a1)(a2);
                if (_277 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _278 = compare(__dict_Ord_12)(a1)(a2);
                if (_278 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _279 = compare(__dict_Ord_13)(a1)(a2);
                if (_279 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _280 = compare(__dict_Ord_14)(a1)(a2);
                if (_280 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_8) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_10) {
        return new Ord(function () {
            return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
        }, function (_23) {
            return function (_24) {
                if (_23.length === 0 && _24.length === 0) {
                    return EQ.value;
                };
                if (_23.length === 0) {
                    return LT.value;
                };
                if (_24.length === 0) {
                    return GT.value;
                };
                if (_23.length >= 1) {
                    var _287 = _23.slice(1);
                    if (_24.length >= 1) {
                        var _285 = _24.slice(1);
                        var _283 = compare(__dict_Ord_10)(_23[0])(_24[0]);
                        if (_283 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_10))(_287)(_285);
                        };
                        return _283;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_16) {
        return function (_17) {
            if (_16 instanceof LT && _17 instanceof LT) {
                return true;
            };
            if (_16 instanceof GT && _17 instanceof GT) {
                return true;
            };
            if (_16 instanceof EQ && _17 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var asTypeOf = function (_8) {
        return function (_9) {
            return _8;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "#": $hash, 
        "$": $dollar, 
        "%": $percent, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "++": $plus$plus, 
        "-": $minus, 
        ".&.": $dot$amp$dot, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        "/": $div, 
        "/=": $div$eq, 
        ":": $colon, 
        "<": $less, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">": $greater, 
        ">=": $greater$eq, 
        ">>=": $greater$greater$eq, 
        ">>>": $greater$greater$greater, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Bits: Bits, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        Unit: Unit, 
        ap: ap, 
        applicativeArr: applicativeArr, 
        applyArr: applyArr, 
        asTypeOf: asTypeOf, 
        bindArr: bindArr, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        complement: complement, 
        cons: cons, 
        "const": $$const, 
        eqArray: eqArray, 
        eqBoolean: eqBoolean, 
        eqNumber: eqNumber, 
        eqOrdering: eqOrdering, 
        eqString: eqString, 
        eqUnit: eqUnit, 
        flip: flip, 
        functorArr: functorArr, 
        id: id, 
        liftA1: liftA1, 
        liftM1: liftM1, 
        monadArr: monadArr, 
        negate: negate, 
        not: not, 
        numNumber: numNumber, 
        ordArray: ordArray, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordUnit: ordUnit, 
        otherwise: otherwise, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupArr: semigroupArr, 
        semigroupString: semigroupString, 
        semigroupUnit: semigroupUnit, 
        semigroupoidArr: semigroupoidArr, 
        shl: shl, 
        show: show, 
        showArray: showArray, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showOrdering: showOrdering, 
        showString: showString, 
        showUnit: showUnit, 
        shr: shr, 
        unit: unit, 
        "void": $$void, 
        zshr: zshr, 
        "||": $bar$bar
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Test_Assert_AssertionError_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
var assert =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */

	/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */

	function exclude () {
	  var excludes = [].slice.call(arguments);

	  function excludeProps (res, obj) {
	    Object.keys(obj).forEach(function (key) {
	      if (!~excludes.indexOf(key)) res[key] = obj[key];
	    });
	  }

	  return function extendExclude () {
	    var args = [].slice.call(arguments)
	      , i = 0
	      , res = {};

	    for (; i < args.length; i++) {
	      excludeProps(res, args[i]);
	    }

	    return res;
	  };
	};

	/*!
	 * Primary Exports
	 */

	module.exports = AssertionError;

	/**
	 * ### AssertionError
	 *
	 * An extension of the JavaScript `Error` constructor for
	 * assertion and validation scenarios.
	 *
	 * @param {String} message
	 * @param {Object} properties to include (optional)
	 * @param {callee} start stack function (optional)
	 */

	function AssertionError (message, _props, ssf) {
	  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
	    , props = extend(_props || {});

	  // default values
	  this.message = message || 'Unspecified AssertionError';
	  this.showDiff = false;

	  // copy from properties
	  for (var key in props) {
	    this[key] = props[key];
	  }

	  // capture stack trace
	  ssf = ssf || arguments.callee;
	  if (ssf && Error.captureStackTrace) {
	    Error.captureStackTrace(this, ssf);
	  }
	}

	/*!
	 * Inherit from Error.prototype
	 */

	AssertionError.prototype = Object.create(Error.prototype);

	/*!
	 * Statically set name
	 */

	AssertionError.prototype.name = 'AssertionError';

	/*!
	 * Ensure correct constructor
	 */

	AssertionError.prototype.constructor = AssertionError;

	/**
	 * Allow errors to be converted to JSON for static transfer.
	 *
	 * @param {Boolean} include stack (default: `true`)
	 * @return {Object} object that can be `JSON.stringify`
	 */

	AssertionError.prototype.toJSON = function (stack) {
	  var extend = exclude('constructor', 'toJSON', 'stack')
	    , props = extend({ name: this.name }, this);

	  // include stack if exists and not turned off
	  if (false !== stack && this.stack) {
	    props.stack = this.stack;
	  }

	  return props;
	};


/***/ }
/******/ ]);
    return {
        assert: assert
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        mkFn0: mkFn0, 
        mkFn1: mkFn1, 
        mkFn10: mkFn10, 
        mkFn2: mkFn2, 
        mkFn3: mkFn3, 
        mkFn4: mkFn4, 
        mkFn5: mkFn5, 
        mkFn6: mkFn6, 
        mkFn7: mkFn7, 
        mkFn8: mkFn8, 
        mkFn9: mkFn9, 
        on: on, 
        runFn0: runFn0, 
        runFn1: runFn1, 
        runFn10: runFn10, 
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4, 
        runFn5: runFn5, 
        runFn6: runFn6, 
        runFn7: runFn7, 
        runFn8: runFn8, 
        runFn9: runFn9
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_27) {
        return function (_28) {
            return function (_29) {
                return _27(_28)(_29);
            };
        };
    };
    var functorRef = new Prelude.Functor(function (_30) {
        return function (_31) {
            return _30(_31);
        };
    });
    var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    return {
        Ref: Ref, 
        eqRef: eqRef, 
        functorRef: functorRef, 
        liftRef: liftRef
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Char = {
        create: function (value) {
            return value;
        }
    };
    
    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var showChar = new Prelude.Show(function (_37) {
        return "Char " + Prelude.show(Prelude.showString)(_37);
    });
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_33) {
        return function (_34) {
            return _33 === _34;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_35) {
        return function (_36) {
            return Prelude.compare(Prelude.ordString)(_35)(_36);
        };
    });
    var charString = function (_32) {
        return _32;
    };
    return {
        charString: charString, 
        eqChar: eqChar, 
        fromCharCode: fromCharCode, 
        ordChar: ordChar, 
        showChar: showChar, 
        toCharCode: toCharCode
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function charCodeAt(i) {
      return function(s) {
        return s.charCodeAt(i);
      };
    }
    ;
    
    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        forE: forE, 
        foreachE: foreachE, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE, 
        runPure: runPure, 
        untilE: untilE, 
        whileE: whileE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  ;
    
  function error(msg) {
    return new Error(msg);
  }
  ;
    
  function message(e) {
    return e.message;
  }
  ;
    
  function throwException(e) {
    return function() {
      throw e;
    };
  }
  ;
    
  function catchException(c) {
    return function(t) {
      return function() {
        try {
          return t();
        } catch(e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === '[object Error]') {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  }
  ;
    var showError = new Prelude.Show(showErrorImpl);
    return {
        catchException: catchException, 
        error: error, 
        message: message, 
        showError: showError, 
        showErrorImpl: showErrorImpl, 
        throwException: throwException
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function runST(f) {  return f;};
    return {
        modifySTRef: modifySTRef, 
        newSTRef: newSTRef, 
        readSTRef: readSTRef, 
        runST: runST, 
        writeSTRef: writeSTRef
    };
})();
var PS = PS || {};
PS.Control_Timer = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var globalEnv = typeof window === 'undefined' ? global : window;
    
  function timeout(time){
    return function(fn){
      return function(){
        return globalEnv.setTimeout(function(){
          fn();
        }, time);
      };
    };
  }
;
    
  function clearTimeout(timer){
    return function(){
      return globalEnv.clearTimeout(timer);
    };
  }
;
    
  function interval(time){
    return function(fn){
      return function(){
        return globalEnv.setInterval(function(){
          fn();
        }, time);
      };
    };
  }
;
    
  function clearInterval(timer){
    return function(){
      return globalEnv.clearInterval(timer);
    };
  }
;
    return {
        clearInterval: clearInterval, 
        clearTimeout: clearTimeout, 
        interval: interval, 
        timeout: timeout
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_16) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_16)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_17) {
        return function (_43) {
            return function (_44) {
                if (_43) {
                    return _44;
                };
                if (!_43) {
                    return Prelude["return"](__dict_Monad_17)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_18) {
        return function (_45) {
            return function (_46) {
                if (!_45) {
                    return _46;
                };
                if (_45) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_19) {
        return function (_38) {
            return function (_39) {
                if (_38 === 0) {
                    return Prelude["return"](__dict_Monad_19)([  ]);
                };
                return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(_39)(function (_4) {
                    return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_19)(_38 - 1)(_39))(function (_3) {
                        return Prelude["return"](__dict_Monad_19)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_20) {
        return function (_40) {
            return function (_41) {
                return function (_42) {
                    if (_42.length === 0) {
                        return Prelude["return"](__dict_Monad_20)(_41);
                    };
                    if (_42.length >= 1) {
                        var _317 = _42.slice(1);
                        return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(_40(_41)(_42[0]))(function (a$prime) {
                            return foldM(__dict_Monad_20)(_40)(a$prime)(_317);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        foldM: foldM, 
        replicateM: replicateM, 
        unless: unless, 
        when: when
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Lazy(defer) {
        this.defer = defer;
    };
    function Lazy1(defer1) {
        this.defer1 = defer1;
    };
    function Lazy2(defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_21) {
        return function (f) {
            return defer2(__dict_Lazy2_21)(function (_) {
                return f(fix2(__dict_Lazy2_21)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_22) {
        return function (f) {
            return defer1(__dict_Lazy1_22)(function (_) {
                return f(fix1(__dict_Lazy1_22)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_23) {
        return function (f) {
            return defer(__dict_Lazy_23)(function (_) {
                return f(fix(__dict_Lazy_23)(f));
            });
        };
    };
    return {
        Lazy: Lazy, 
        Lazy1: Lazy1, 
        Lazy2: Lazy2, 
        defer: defer, 
        defer1: defer1, 
        defer2: defer2, 
        fix: fix, 
        fix1: fix1, 
        fix2: fix2
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_24) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_24)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_25) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_25)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_26) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_26)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_27) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_27)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_28) {
        return function (w) {
            return $less$less$eq(__dict_Extend_28)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        "<<=": $less$less$eq, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        Extend: Extend, 
        duplicate: duplicate, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_29) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_29)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_30) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_30)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_31) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_31)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_32) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_32)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_33) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_33)(cond)(function (cond$prime) {
                        return cond$prime ? t : f;
                    });
                };
            };
        };
    };
    return {
        "<=<": $less$eq$less, 
        "=<<": $eq$less$less, 
        ">=>": $greater$eq$greater, 
        ifM: ifM, 
        join: join
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_34) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_34)(Prelude["<$>"](__dict_Apply_34["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_35) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_35)(Prelude["<$>"](__dict_Apply_35["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_36) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<$>"](__dict_Apply_36["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_37) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_38) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_40) {
        return function (a) {
            return $times$greater(__dict_Apply_40)(a)(forever(__dict_Apply_40)(a));
        };
    };
    return {
        "*>": $times$greater, 
        "<*": $less$times, 
        forever: forever, 
        lift2: lift2, 
        lift3: lift3, 
        lift4: lift4, 
        lift5: lift5
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        "<|>": $less$bar$greater, 
        Alt: Alt
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_41) {
        return function (__dict_Lazy1_42) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_41["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_41["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_42)(function (_) {
                    return many(__dict_Alternative_41)(__dict_Lazy1_42)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_43) {
        return function (__dict_Lazy1_44) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_43["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_43)(__dict_Lazy1_44)(v))(Prelude.pure(__dict_Alternative_43["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_45) {
        return function (_47) {
            if (_47) {
                return Prelude["return"](__dict_MonadPlus_45["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_47) {
                return Control_Plus.empty((__dict_MonadPlus_45["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var showEither = function (__dict_Show_46) {
        return function (__dict_Show_47) {
            return new Prelude.Show(function (_57) {
                if (_57 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_46)(_57.value0) + ")");
                };
                if (_57 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_47)(_57.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = new Prelude.Functor(function (_51) {
        return function (_52) {
            if (_52 instanceof Left) {
                return new Left(_52.value0);
            };
            if (_52 instanceof Right) {
                return new Right(_51(_52.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var eqEither = function (__dict_Eq_50) {
        return function (__dict_Eq_51) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_50)(__dict_Eq_51))(a)(b);
                };
            }, function (_58) {
                return function (_59) {
                    if (_58 instanceof Left && _59 instanceof Left) {
                        return Prelude["=="](__dict_Eq_50)(_58.value0)(_59.value0);
                    };
                    if (_58 instanceof Right && _59 instanceof Right) {
                        return Prelude["=="](__dict_Eq_51)(_58.value0)(_59.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_48) {
        return function (__dict_Ord_49) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_48["__superclass_Prelude.Eq_0"]())(__dict_Ord_49["__superclass_Prelude.Eq_0"]());
            }, function (_60) {
                return function (_61) {
                    if (_60 instanceof Left && _61 instanceof Left) {
                        return Prelude.compare(__dict_Ord_48)(_60.value0)(_61.value0);
                    };
                    if (_60 instanceof Right && _61 instanceof Right) {
                        return Prelude.compare(__dict_Ord_49)(_60.value0)(_61.value0);
                    };
                    if (_60 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_61 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (_48) {
        return function (_49) {
            return function (_50) {
                if (_50 instanceof Left) {
                    return _48(_50.value0);
                };
                if (_50 instanceof Right) {
                    return _49(_50.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = new Prelude.Apply(function (_53) {
        return function (_54) {
            if (_53 instanceof Left) {
                return new Left(_53.value0);
            };
            if (_53 instanceof Right) {
                return Prelude["<$>"](functorEither)(_53.value0)(_54);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    var altEither = new Control_Alt.Alt(function (_55) {
        return function (_56) {
            if (_55 instanceof Left) {
                return _56;
            };
            return _55;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        altEither: altEither, 
        applicativeEither: applicativeEither, 
        applyEither: applyEither, 
        bindEither: bindEither, 
        either: either, 
        eqEither: eqEither, 
        functorEither: functorEither, 
        isLeft: isLeft, 
        isRight: isRight, 
        monadEither: monadEither, 
        ordEither: ordEither, 
        showEither: showEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var choice2 = Data_Either.either;
    var choice3 = function (a) {
        return function (b) {
            return function (c) {
                return Data_Either.either(a)(choice2(b)(c));
            };
        };
    };
    var choice4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return Data_Either.either(a)(choice3(b)(c)(d));
                };
            };
        };
    };
    var choice5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return Data_Either.either(a)(choice4(b)(c)(d)(e));
                    };
                };
            };
        };
    };
    var choice6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return Data_Either.either(a)(choice5(b)(c)(d)(e)(f));
                        };
                    };
                };
            };
        };
    };
    var choice7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return Data_Either.either(a)(choice6(b)(c)(d)(e)(f)(g));
                            };
                        };
                    };
                };
            };
        };
    };
    var choice8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return Data_Either.either(a)(choice7(b)(c)(d)(e)(f)(g)(h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return Data_Either.either(a)(choice8(b)(c)(d)(e)(f)(g)(h)(i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return Data_Either.either(a)(choice9(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        choice10: choice10, 
        choice2: choice2, 
        choice3: choice3, 
        choice4: choice4, 
        choice5: choice5, 
        choice6: choice6, 
        choice7: choice7, 
        choice8: choice8, 
        choice9: choice9
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var showMaybe = function (__dict_Show_52) {
        return new Prelude.Show(function (_77) {
            if (_77 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_52)(_77.value0) + ")");
            };
            if (_77 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_53) {
        return new Prelude.Semigroup(function (_75) {
            return function (_76) {
                if (_75 instanceof Nothing) {
                    return _76;
                };
                if (_76 instanceof Nothing) {
                    return _75;
                };
                if (_75 instanceof Just && _76 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_53)(_75.value0)(_76.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_62) {
        return function (_63) {
            return function (_64) {
                if (_64 instanceof Nothing) {
                    return _62;
                };
                if (_64 instanceof Just) {
                    return _63(_64.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (_65) {
        return function (_66) {
            if (_66 instanceof Just) {
                return new Just(_65(_66.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (_73) {
        return function (_74) {
            if (_74 instanceof Nothing) {
                return Nothing.value;
            };
            return Just.create(_73(_74));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_55) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_55))(a)(b);
            };
        }, function (_78) {
            return function (_79) {
                if (_78 instanceof Nothing && _79 instanceof Nothing) {
                    return true;
                };
                if (_78 instanceof Just && _79 instanceof Just) {
                    return Prelude["=="](__dict_Eq_55)(_78.value0)(_79.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_54) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_54["__superclass_Prelude.Eq_0"]());
        }, function (_80) {
            return function (_81) {
                if (_80 instanceof Just && _81 instanceof Just) {
                    return Prelude.compare(__dict_Ord_54)(_80.value0)(_81.value0);
                };
                if (_80 instanceof Nothing && _81 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_80 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_81 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_67) {
        return function (_68) {
            if (_67 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_67.value0)(_68);
            };
            if (_67 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_71) {
        return function (_72) {
            if (_71 instanceof Just) {
                return _72(_71.value0);
            };
            if (_71 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_69) {
        return function (_70) {
            if (_69 instanceof Nothing) {
                return _70;
            };
            return _69;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Just: Just, 
        Nothing: Nothing, 
        altMaybe: altMaybe, 
        alternativeMaybe: alternativeMaybe, 
        applicativeMaybe: applicativeMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe, 
        eqMaybe: eqMaybe, 
        extendMaybe: extendMaybe, 
        fromMaybe: fromMaybe, 
        functorMaybe: functorMaybe, 
        isJust: isJust, 
        isNothing: isNothing, 
        maybe: maybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        ordMaybe: ordMaybe, 
        plusMaybe: plusMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_84) {
        if (_84.length >= 1) {
            var _385 = _84.slice(1);
            return new Data_Maybe.Just(_385);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy__100) {
            return function (__copy__101) {
                return function (__copy__102) {
                    var _100 = __copy__100;
                    var _101 = __copy__101;
                    var _102 = __copy__102;
                    tco: while (true) {
                        if (_102.length >= 1) {
                            var _390 = _102.slice(1);
                            if (_101(_102[0])) {
                                var __tco__100 = Prelude[":"](_102[0])(_100);
                                var __tco__101 = _101;
                                _100 = __tco__100;
                                _101 = __tco__101;
                                _102 = _390;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_100), 
                            rest: _102
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _391 = comp(x)(y);
                    if (_391 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_391 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_391 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_56) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_56))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_86) {
        if (_86.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function (_93) {
        return function (_94) {
            if (_94.length === 0) {
                return [  ];
            };
            if (_94.length >= 1) {
                var _396 = _94.slice(1);
                return Prelude[":"](_94[0])(nubBy(_93)(filter(function (y) {
                    return !_93(_94[0])(y);
                })(_396)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_57) {
        return nubBy(Prelude["=="](__dict_Eq_57));
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (__copy__83) {
        var _83 = __copy__83;
        tco: while (true) {
            if (_83.length >= 1) {
                var _399 = _83.slice(1);
                if (_399.length === 0) {
                    return new Data_Maybe.Just(_83[0]);
                };
            };
            if (_83.length >= 1) {
                var _401 = _83.slice(1);
                _83 = _401;
                continue tco;
            };
            return Data_Maybe.Nothing.value;
        };
    };
    var intersectBy = function (_90) {
        return function (_91) {
            return function (_92) {
                if (_91.length === 0) {
                    return [  ];
                };
                if (_92.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_90(x))(_92) >= 0;
                };
                return filter(el)(_91);
            };
        };
    };
    var intersect = function (__dict_Eq_58) {
        return intersectBy(Prelude["=="](__dict_Eq_58));
    };
    var init = function (_85) {
        if (_85.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_85) - 1)(_85));
    };
    var head = function (_82) {
        if (_82.length >= 1) {
            var _408 = _82.slice(1);
            return new Data_Maybe.Just(_82[0]);
        };
        return Data_Maybe.Nothing.value;
    };
    var groupBy = (function () {
        var go = function (__copy__97) {
            return function (__copy__98) {
                return function (__copy__99) {
                    var _97 = __copy__97;
                    var _98 = __copy__98;
                    var _99 = __copy__99;
                    tco: while (true) {
                        if (_99.length === 0) {
                            return reverse(_97);
                        };
                        if (_99.length >= 1) {
                            var _413 = _99.slice(1);
                            var sp = span(_98(_99[0]))(_413);
                            var __tco__97 = Prelude[":"](Prelude[":"](_99[0])(sp.init))(_97);
                            var __tco__98 = _98;
                            _97 = __tco__97;
                            _98 = __tco__98;
                            _99 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_59) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_59))(xs);
        };
    };
    var group$prime = function (__dict_Ord_60) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_60["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_60));
    };
    var functorArray = new Prelude.Functor(map);
    var elemLastIndex = function (__dict_Eq_61) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_61)(x));
        };
    };
    var elemIndex = function (__dict_Eq_62) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_62)(x));
        };
    };
    var deleteBy = function (_87) {
        return function (_88) {
            return function (_89) {
                if (_89.length === 0) {
                    return [  ];
                };
                var _417 = findIndex(_87(_88))(_89);
                if (_417 < 0) {
                    return _89;
                };
                return deleteAt(_417)(1)(_89);
            };
        };
    };
    var $$delete = function (__dict_Eq_63) {
        return deleteBy(Prelude["=="](__dict_Eq_63));
    };
    var $bslash$bslash = function (__dict_Eq_64) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__95) {
                    return function (__copy__96) {
                        var _95 = __copy__95;
                        var _96 = __copy__96;
                        tco: while (true) {
                            if (_96.length === 0) {
                                return _95;
                            };
                            if (_95.length === 0) {
                                return [  ];
                            };
                            if (_96.length >= 1) {
                                var _421 = _96.slice(1);
                                var __tco__95 = $$delete(__dict_Eq_64)(_96[0])(_95);
                                _95 = __tco__95;
                                _96 = _421;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        "!!": $bang$bang, 
        "..": $dot$dot, 
        "\\\\": $bslash$bslash, 
        altArray: altArray, 
        alternativeArray: alternativeArray, 
        append: append, 
        applicativeArray: applicativeArray, 
        applyArray: applyArray, 
        bindArray: bindArray, 
        catMaybes: catMaybes, 
        concat: concat, 
        concatMap: concatMap, 
        "delete": $$delete, 
        deleteAt: deleteAt, 
        deleteBy: deleteBy, 
        drop: drop, 
        elemIndex: elemIndex, 
        elemLastIndex: elemLastIndex, 
        filter: filter, 
        findIndex: findIndex, 
        findLastIndex: findLastIndex, 
        functorArray: functorArray, 
        group: group, 
        "group'": group$prime, 
        groupBy: groupBy, 
        head: head, 
        init: init, 
        insertAt: insertAt, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        last: last, 
        length: length, 
        map: map, 
        mapMaybe: mapMaybe, 
        monadArray: monadArray, 
        monadPlusArray: monadPlusArray, 
        nub: nub, 
        nubBy: nubBy, 
        "null": $$null, 
        plusArray: plusArray, 
        range: range, 
        reverse: reverse, 
        semigroupArray: semigroupArray, 
        singleton: singleton, 
        snoc: snoc, 
        sort: sort, 
        sortBy: sortBy, 
        span: span, 
        tail: tail, 
        take: take, 
        updateAt: updateAt, 
        zipWith: zipWith
    };
})();
var PS = PS || {};
PS.Data_Array_ST = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
  function runSTArray(f) {
    return f;
  };
    
  function emptySTArray() {
    return [];
  };
    
  function peekSTArrayImpl(arr, i, s, f) {
    return function() {
      var index = ~~i;
      if (0 <= index && index < arr.length) {
        return s(arr[index]);
      } else {
        return f;
      }
    };
  };
    
  function pokeSTArrayImpl(arr, i, a) {
    return function() {
      var index = ~~i;
      if (0 <= index && index <= arr.length) {
        arr[index] = a;
        return true;
      }
      return false;
    };
  };
    
  function pushSTArrayImpl(arr, a) {
    return function() {
      arr.push(a);
      return {};
    };
  };
    var pushSTArray = function (arr) {
        return function (a) {
            return pushSTArrayImpl(arr, a);
        };
    };
    var pokeSTArray = function (arr) {
        return function (i) {
            return function (a) {
                return pokeSTArrayImpl(arr, i, a);
            };
        };
    };
    var peekSTArray = function (arr) {
        return function (i) {
            return peekSTArrayImpl(arr, i, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        emptySTArray: emptySTArray, 
        peekSTArray: peekSTArray, 
        pokeSTArray: pokeSTArray, 
        pushSTArray: pushSTArray, 
        runSTArray: runSTArray
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_103) {
        if (_103 instanceof Data_Maybe.Just) {
            return _103.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Prelude = PS.Prelude;
    var tail = function (_105) {
        if (_105.length >= 1) {
            var _426 = _105.slice(1);
            return _426;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (_104) {
        if (_104.length >= 1) {
            var _429 = _104.slice(1);
            return _104[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        head: head, 
        init: init, 
        last: last, 
        tail: tail
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_65) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_65);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_66) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_66["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_66)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArr: monoidArr, 
        monoidArray: monoidArray, 
        monoidMaybe: monoidMaybe, 
        monoidString: monoidString, 
        monoidUnit: monoidUnit
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = {
        create: function (value) {
            return value;
        }
    };
    var showAll = new Prelude.Show(function (_111) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_111) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_112) {
        return function (_113) {
            return _112 && _113;
        };
    });
    var runAll = function (_106) {
        return _106;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_109) {
        return function (_110) {
            return _109 !== _110;
        };
    }, function (_107) {
        return function (_108) {
            return _107 === _108;
        };
    });
    return {
        All: All, 
        eqAll: eqAll, 
        monoidAll: monoidAll, 
        runAll: runAll, 
        semigroupAll: semigroupAll, 
        showAll: showAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = {
        create: function (value) {
            return value;
        }
    };
    var showAny = new Prelude.Show(function (_119) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_119) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_120) {
        return function (_121) {
            return _120 || _121;
        };
    });
    var runAny = function (_114) {
        return _114;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_117) {
        return function (_118) {
            return _117 !== _118;
        };
    }, function (_115) {
        return function (_116) {
            return _115 === _116;
        };
    });
    return {
        Any: Any, 
        eqAny: eqAny, 
        monoidAny: monoidAny, 
        runAny: runAny, 
        semigroupAny: semigroupAny, 
        showAny: showAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Dual = {
        create: function (value) {
            return value;
        }
    };
    var showDual = function (__dict_Show_67) {
        return new Prelude.Show(function (_129) {
            return "Dual (" + (Prelude.show(__dict_Show_67)(_129) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_68) {
        return new Prelude.Semigroup(function (_130) {
            return function (_131) {
                return Prelude["<>"](__dict_Semigroup_68)(_131)(_130);
            };
        });
    };
    var runDual = function (_122) {
        return _122;
    };
    var monoidDual = function (__dict_Monoid_70) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_70["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_70));
    };
    var eqDual = function (__dict_Eq_71) {
        return new Prelude.Eq(function (_125) {
            return function (_126) {
                return Prelude["/="](__dict_Eq_71)(_125)(_126);
            };
        }, function (_123) {
            return function (_124) {
                return Prelude["=="](__dict_Eq_71)(_123)(_124);
            };
        });
    };
    var ordDual = function (__dict_Ord_69) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_69["__superclass_Prelude.Eq_0"]());
        }, function (_127) {
            return function (_128) {
                return Prelude.compare(__dict_Ord_69)(_127)(_128);
            };
        });
    };
    return {
        Dual: Dual, 
        eqDual: eqDual, 
        monoidDual: monoidDual, 
        ordDual: ordDual, 
        runDual: runDual, 
        semigroupDual: semigroupDual, 
        showDual: showDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = {
        create: function (value) {
            return value;
        }
    };
    var semigroupEndo = new Prelude.Semigroup(function (_133) {
        return function (_134) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_133)(_134);
        };
    });
    var runEndo = function (_132) {
        return _132;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        monoidEndo: monoidEndo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Product = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Product = {
        create: function (value) {
            return value;
        }
    };
    var showProduct = new Prelude.Show(function (_142) {
        return "Product (" + (Prelude.show(Prelude.showNumber)(_142) + ")");
    });
    var semigroupProduct = new Prelude.Semigroup(function (_143) {
        return function (_144) {
            return _143 * _144;
        };
    });
    var runProduct = function (_135) {
        return _135;
    };
    var monoidProduct = new Data_Monoid.Monoid(function () {
        return semigroupProduct;
    }, 1);
    var eqProduct = new Prelude.Eq(function (_138) {
        return function (_139) {
            return _138 !== _139;
        };
    }, function (_136) {
        return function (_137) {
            return _136 === _137;
        };
    });
    var ordProduct = new Prelude.Ord(function () {
        return eqProduct;
    }, function (_140) {
        return function (_141) {
            return Prelude.compare(Prelude.ordNumber)(_140)(_141);
        };
    });
    return {
        Product: Product, 
        eqProduct: eqProduct, 
        monoidProduct: monoidProduct, 
        ordProduct: ordProduct, 
        runProduct: runProduct, 
        semigroupProduct: semigroupProduct, 
        showProduct: showProduct
    };
})();
var PS = PS || {};
PS.Data_Monoid_Sum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Sum = {
        create: function (value) {
            return value;
        }
    };
    var showSum = new Prelude.Show(function (_152) {
        return "Sum (" + (Prelude.show(Prelude.showNumber)(_152) + ")");
    });
    var semigroupSum = new Prelude.Semigroup(function (_153) {
        return function (_154) {
            return _153 + _154;
        };
    });
    var runSum = function (_145) {
        return _145;
    };
    var monoidSum = new Data_Monoid.Monoid(function () {
        return semigroupSum;
    }, 0);
    var eqSum = new Prelude.Eq(function (_148) {
        return function (_149) {
            return _148 !== _149;
        };
    }, function (_146) {
        return function (_147) {
            return _146 === _147;
        };
    });
    var ordSum = new Prelude.Ord(function () {
        return eqSum;
    }, function (_150) {
        return function (_151) {
            return Prelude.compare(Prelude.ordNumber)(_150)(_151);
        };
    });
    return {
        Sum: Sum, 
        eqSum: eqSum, 
        monoidSum: monoidSum, 
        ordSum: ordSum, 
        runSum: runSum, 
        semigroupSum: semigroupSum, 
        showSum: showSum
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_159) {
        if (_159.length >= 1) {
            var _486 = _159.slice(1);
            var _480 = unzip(_486);
            return new Tuple(Prelude[":"]((_159[0]).value0)(_480.value0), Prelude[":"]((_159[0]).value1)(_480.value1));
        };
        if (_159.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_157) {
        return function (_158) {
            return _157(_158.value0)(_158.value1);
        };
    };
    var swap = function (_160) {
        return new Tuple(_160.value1, _160.value0);
    };
    var snd = function (_156) {
        return _156.value1;
    };
    var showTuple = function (__dict_Show_72) {
        return function (__dict_Show_73) {
            return new Prelude.Show(function (_161) {
                return "Tuple (" + (Prelude.show(__dict_Show_72)(_161.value0) + (") (" + (Prelude.show(__dict_Show_73)(_161.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_166) {
        return function (_167) {
            return new Tuple(_167.value0, _166.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_74) {
        return function (__dict_Semigroup_75) {
            return new Prelude.Semigroup(function (_168) {
                return function (_169) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_74)(_168.value0)(_169.value0), Prelude["<>"](__dict_Semigroup_75)(_168.value1)(_169.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_78) {
        return function (__dict_Monoid_79) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_78["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_79["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_78), Data_Monoid.mempty(__dict_Monoid_79)));
        };
    };
    var functorTuple = new Prelude.Functor(function (_170) {
        return function (_171) {
            return new Tuple(_171.value0, _170(_171.value1));
        };
    });
    var fst = function (_155) {
        return _155.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_81) {
        return function (__dict_Lazy1_82) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_81)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_82)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_83) {
        return function (__dict_Lazy2_84) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_83)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_84)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_85) {
        return function (__dict_Lazy_86) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_85)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_86)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (_176) {
        return function (_177) {
            return new Tuple(_177.value0, _176(_177));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_87) {
        return function (__dict_Eq_88) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_87)(__dict_Eq_88))(t1)(t2);
                };
            }, function (_162) {
                return function (_163) {
                    return Prelude["=="](__dict_Eq_87)(_162.value0)(_163.value0) && Prelude["=="](__dict_Eq_88)(_162.value1)(_163.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_76) {
        return function (__dict_Ord_77) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_76["__superclass_Prelude.Eq_0"]())(__dict_Ord_77["__superclass_Prelude.Eq_0"]());
            }, function (_164) {
                return function (_165) {
                    var _531 = Prelude.compare(__dict_Ord_76)(_164.value0)(_165.value0);
                    if (_531 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_77)(_164.value1)(_165.value1);
                    };
                    return _531;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_90) {
        return new Prelude.Apply(function (_172) {
            return function (_173) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_90)(_172.value0)(_173.value0), _172.value1(_173.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_89) {
        return new Prelude.Bind(function (_174) {
            return function (_175) {
                var _544 = _175(_174.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_89)(_174.value0)(_544.value0), _544.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_89);
        });
    };
    var applicativeTuple = function (__dict_Monoid_91) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_91["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_91)));
    };
    var monadTuple = function (__dict_Monoid_80) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_80);
        }, function () {
            return bindTuple(__dict_Monoid_80["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        applicativeTuple: applicativeTuple, 
        applyTuple: applyTuple, 
        bindTuple: bindTuple, 
        comonadTuple: comonadTuple, 
        curry: curry, 
        eqTuple: eqTuple, 
        extendTuple: extendTuple, 
        fst: fst, 
        functorTuple: functorTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple, 
        lazyTuple: lazyTuple, 
        monadTuple: monadTuple, 
        monoidTuple: monoidTuple, 
        ordTuple: ordTuple, 
        semigroupTuple: semigroupTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        showTuple: showTuple, 
        snd: snd, 
        swap: swap, 
        uncurry: uncurry, 
        unzip: unzip, 
        zip: zip
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var con9 = function (f) {
        return function (_185) {
            return f(_185.value0)(_185.value1.value0)(_185.value1.value1.value0)(_185.value1.value1.value1.value0)(_185.value1.value1.value1.value1.value0)(_185.value1.value1.value1.value1.value1.value0)(_185.value1.value1.value1.value1.value1.value1.value0)(_185.value1.value1.value1.value1.value1.value1.value1.value0)(_185.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con8 = function (f) {
        return function (_184) {
            return f(_184.value0)(_184.value1.value0)(_184.value1.value1.value0)(_184.value1.value1.value1.value0)(_184.value1.value1.value1.value1.value0)(_184.value1.value1.value1.value1.value1.value0)(_184.value1.value1.value1.value1.value1.value1.value0)(_184.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con7 = function (f) {
        return function (_183) {
            return f(_183.value0)(_183.value1.value0)(_183.value1.value1.value0)(_183.value1.value1.value1.value0)(_183.value1.value1.value1.value1.value0)(_183.value1.value1.value1.value1.value1.value0)(_183.value1.value1.value1.value1.value1.value1);
        };
    };
    var con6 = function (f) {
        return function (_182) {
            return f(_182.value0)(_182.value1.value0)(_182.value1.value1.value0)(_182.value1.value1.value1.value0)(_182.value1.value1.value1.value1.value0)(_182.value1.value1.value1.value1.value1);
        };
    };
    var con5 = function (f) {
        return function (_181) {
            return f(_181.value0)(_181.value1.value0)(_181.value1.value1.value0)(_181.value1.value1.value1.value0)(_181.value1.value1.value1.value1);
        };
    };
    var con4 = function (f) {
        return function (_180) {
            return f(_180.value0)(_180.value1.value0)(_180.value1.value1.value0)(_180.value1.value1.value1);
        };
    };
    var con3 = function (f) {
        return function (_179) {
            return f(_179.value0)(_179.value1.value0)(_179.value1.value1);
        };
    };
    var con2 = function (f) {
        return function (_178) {
            return f(_178.value0)(_178.value1);
        };
    };
    var con10 = function (f) {
        return function (_186) {
            return f(_186.value0)(_186.value1.value0)(_186.value1.value1.value0)(_186.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value1.value1.value1.value1.value0)(_186.value1.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    return {
        "/\\": $div$bslash, 
        con10: con10, 
        con2: con2, 
        con3: con3, 
        con4: con4, 
        con5: con5, 
        con6: con6, 
        con7: con7, 
        con8: con8, 
        con9: con9
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = {
        create: function (value) {
            return value;
        }
    };
    var showFirst = function (__dict_Show_92) {
        return new Prelude.Show(function (_194) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_92))(_194) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_195) {
        return function (_196) {
            if (_195 instanceof Data_Maybe.Just) {
                return _195;
            };
            return _196;
        };
    });
    var runFirst = function (_187) {
        return _187;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var eqFirst = function (__dict_Eq_94) {
        return new Prelude.Eq(function (_190) {
            return function (_191) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_94))(_190)(_191);
            };
        }, function (_188) {
            return function (_189) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_94))(_188)(_189);
            };
        });
    };
    var ordFirst = function (__dict_Ord_93) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_93["__superclass_Prelude.Eq_0"]());
        }, function (_192) {
            return function (_193) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_93))(_192)(_193);
            };
        });
    };
    return {
        First: First, 
        eqFirst: eqFirst, 
        monoidFirst: monoidFirst, 
        ordFirst: ordFirst, 
        runFirst: runFirst, 
        semigroupFirst: semigroupFirst, 
        showFirst: showFirst
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Data_Monoid = PS.Data_Monoid;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_95) {
        return function (__dict_Foldable_96) {
            return function (f) {
                return foldr(__dict_Foldable_96)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_95["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_95)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_97) {
        return function (__dict_Foldable_98) {
            return Prelude.flip(traverse_(__dict_Applicative_97)(__dict_Foldable_98));
        };
    };
    var sequence_ = function (__dict_Applicative_99) {
        return function (__dict_Foldable_100) {
            return traverse_(__dict_Applicative_99)(__dict_Foldable_100)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_101) {
        return function (__dict_Monoid_102) {
            return function (sep) {
                return function (xs) {
                    var go = function (_222) {
                        return function (_223) {
                            if (_222.init) {
                                return {
                                    init: false, 
                                    acc: _223
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(_222.acc)(Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(sep)(_223))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_101)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_102)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_103) {
        return function (__dict_Monoid_104) {
            return foldl(__dict_Foldable_103)(Prelude["<>"](__dict_Monoid_104["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_104));
        };
    };
    var or = function (__dict_Foldable_105) {
        return foldl(__dict_Foldable_105)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_106) {
        return foldl(__dict_Foldable_106)(Prelude["*"](Prelude.numNumber))(1);
    };
    var sum = function (__dict_Foldable_107) {
        return foldl(__dict_Foldable_107)(Prelude["+"](Prelude.numNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_108) {
        return function (_220) {
            return function (_221) {
                return _220(_221.value1);
            };
        };
    }, function (_217) {
        return function (_218) {
            return function (_219) {
                return _217(_218)(_219.value1);
            };
        };
    }, function (_214) {
        return function (_215) {
            return function (_216) {
                return _214(_216.value1)(_215);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_109) {
        return function (_212) {
            return function (_213) {
                if (_213 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_109);
                };
                if (_213 instanceof Data_Maybe.Just) {
                    return _212(_213.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_209) {
        return function (_210) {
            return function (_211) {
                if (_211 instanceof Data_Maybe.Nothing) {
                    return _210;
                };
                if (_211 instanceof Data_Maybe.Just) {
                    return _209(_210)(_211.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_206) {
        return function (_207) {
            return function (_208) {
                if (_208 instanceof Data_Maybe.Nothing) {
                    return _207;
                };
                if (_208 instanceof Data_Maybe.Just) {
                    return _206(_208.value0)(_207);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_110) {
        return function (_204) {
            return function (_205) {
                if (_205 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_110);
                };
                if (_205 instanceof Data_Either.Right) {
                    return _204(_205.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_201) {
        return function (_202) {
            return function (_203) {
                if (_203 instanceof Data_Either.Left) {
                    return _202;
                };
                if (_203 instanceof Data_Either.Right) {
                    return _201(_202)(_203.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_198) {
        return function (_199) {
            return function (_200) {
                if (_200 instanceof Data_Either.Left) {
                    return _199;
                };
                if (_200 instanceof Data_Either.Right) {
                    return _198(_200.value0)(_199);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_111) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_111["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_111))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var lookup = function (__dict_Eq_112) {
        return function (__dict_Foldable_113) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_113)(Data_Monoid_First.monoidFirst)(function (_197) {
                        return Prelude["=="](__dict_Eq_112)(a)(_197.value0) ? new Data_Maybe.Just(_197.value1) : Data_Maybe.Nothing.value;
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_114) {
        return function (__dict_Monoid_115) {
            return foldMap(__dict_Foldable_114)(__dict_Monoid_115)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_116) {
        return function (p) {
            return function (f) {
                var _705 = foldMap(__dict_Foldable_116)(Data_Monoid.monoidArray)(function (x) {
                    return p(x) ? [ x ] : [  ];
                })(f);
                if (_705.length >= 1) {
                    var _707 = _705.slice(1);
                    return new Data_Maybe.Just(_705[0]);
                };
                if (_705.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_117) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_117)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_118) {
        return function (__dict_Foldable_119) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_119))(Prelude["=="](__dict_Eq_118));
        };
    };
    var notElem = function (__dict_Eq_120) {
        return function (__dict_Foldable_121) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_120)(__dict_Foldable_121)(x));
            };
        };
    };
    var and = function (__dict_Foldable_122) {
        return foldl(__dict_Foldable_122)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_123) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_123)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        all: all, 
        and: and, 
        any: any, 
        elem: elem, 
        find: find, 
        fold: fold, 
        foldMap: foldMap, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableTuple: foldableTuple, 
        foldl: foldl, 
        foldlArray: foldlArray, 
        foldr: foldr, 
        foldrArray: foldrArray, 
        for_: for_, 
        intercalate: intercalate, 
        lookup: lookup, 
        mconcat: mconcat, 
        notElem: notElem, 
        or: or, 
        product: product, 
        sequence_: sequence_, 
        sum: sum, 
        traverse_: traverse_
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = {
        create: function (value) {
            return value;
        }
    };
    var showLast = function (__dict_Show_124) {
        return new Prelude.Show(function (_231) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_124))(_231) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (_232) {
        return function (_233) {
            if (_233 instanceof Data_Maybe.Just) {
                return _233;
            };
            if (_233 instanceof Data_Maybe.Nothing) {
                return _232;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_224) {
        return _224;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var eqLast = function (__dict_Eq_126) {
        return new Prelude.Eq(function (_227) {
            return function (_228) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_126))(_227)(_228);
            };
        }, function (_225) {
            return function (_226) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_126))(_225)(_226);
            };
        });
    };
    var ordLast = function (__dict_Ord_125) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_125["__superclass_Prelude.Eq_0"]());
        }, function (_229) {
            return function (_230) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_125))(_229)(_230);
            };
        });
    };
    return {
        Last: Last, 
        eqLast: eqLast, 
        monoidLast: monoidLast, 
        ordLast: ordLast, 
        runLast: runLast, 
        semigroupLast: semigroupLast, 
        showLast: showLast
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;
    
    function fromCharArray(a) {
      return a.join('');
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;
    
    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function count(p){      
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };      
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function toCharArray(s) {
      return s.split('');
    }
    ;
    
    function toLower(s) {
      return s.toLowerCase();
    }
    ;
    
    function toUpper(s) {
      return s.toUpperCase();
    }
    ;
    
    function trim(s) {
      return s.trim();
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    var takeWhile = function (p) {
        return function (s) {
            return take(count(p)(s))(s);
        };
    };
    var $$null = function (s) {
        return length(s) === 0;
    };
    var uncons = function (_234) {
        if ($$null(_234)) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just({
            head: Data_String_Unsafe.charAt(0)(_234), 
            tail: drop(1)(_234)
        });
    };
    var fromChar = Data_Char.charString;
    var singleton = fromChar;
    var dropWhile = function (p) {
        return function (s) {
            return drop(count(p)(s))(s);
        };
    };
    var charCodeAt = function (n) {
        return function (s) {
            return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt, 
        count: count, 
        drop: drop, 
        dropWhile: dropWhile, 
        fromChar: fromChar, 
        fromCharArray: fromCharArray, 
        indexOf: indexOf, 
        "indexOf'": indexOf$prime, 
        joinWith: joinWith, 
        lastIndexOf: lastIndexOf, 
        "lastIndexOf'": lastIndexOf$prime, 
        length: length, 
        localeCompare: localeCompare, 
        "null": $$null, 
        replace: replace, 
        singleton: singleton, 
        split: split, 
        take: take, 
        takeWhile: takeWhile, 
        toCharArray: toCharArray, 
        toLower: toLower, 
        toUpper: toUpper, 
        trim: trim, 
        uncons: uncons
    };
})();
var PS = PS || {};
PS.Data_String_Regex = (function () {
    "use strict";
    var Data_String = PS.Data_String;
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
  function showRegex$prime(r) {
    return '' + r;
  }
  ;
    
  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;
    
  function source(r) {
    return r.source;
  }
  ;
    
  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;
    
  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;
    
  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;
    
  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;
    
  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;
    
  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;
    
  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
    var showRegex = new Prelude.Show(showRegex$prime);
    var renderFlags = function (flags_1) {
        return (flags_1.global ? "g" : "") + ((flags_1.ignoreCase ? "i" : "") + ((flags_1.multiline ? "m" : "") + ((flags_1.sticky ? "y" : "") + (flags_1.unicode ? "u" : ""))));
    };
    var regex = function (source_1) {
        return function (flags_1) {
            return regex$prime(source_1)(renderFlags(flags_1));
        };
    };
    var parseFlags = function (s) {
        return {
            global: Data_String.indexOf("g")(s) >= 0, 
            ignoreCase: Data_String.indexOf("i")(s) >= 0, 
            multiline: Data_String.indexOf("m")(s) >= 0, 
            sticky: Data_String.indexOf("y")(s) >= 0, 
            unicode: Data_String.indexOf("u")(s) >= 0
        };
    };
    var match = function (r) {
        return function (s) {
            return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        flags: flags, 
        match: match, 
        parseFlags: parseFlags, 
        regex: regex, 
        renderFlags: renderFlags, 
        replace: replace, 
        "replace'": replace$prime, 
        search: search, 
        showRegex: showRegex, 
        source: source, 
        split: split, 
        test: test
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var StateR = {
        create: function (value) {
            return value;
        }
    };
    var StateL = {
        create: function (value) {
            return value;
        }
    };
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_128) {
        return function (_248) {
            return Prelude["<$>"]((__dict_Applicative_128["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_248.value0))(_248.value1);
        };
    }, function (__dict_Applicative_127) {
        return function (_246) {
            return function (_247) {
                return Prelude["<$>"]((__dict_Applicative_127["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_247.value0))(_246(_247.value1));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_130) {
        return function (_245) {
            if (_245 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_130)(Data_Maybe.Nothing.value);
            };
            if (_245 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_130["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_245.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_129) {
        return function (_243) {
            return function (_244) {
                if (_244 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_129)(Data_Maybe.Nothing.value);
                };
                if (_244 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_129["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_243(_244.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_132) {
        return function (_242) {
            if (_242 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_132)(new Data_Either.Left(_242.value0));
            };
            if (_242 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_132["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_242.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_131) {
        return function (_240) {
            return function (_241) {
                if (_241 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_131)(new Data_Either.Left(_241.value0));
                };
                if (_241 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_131["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_240(_241.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var stateR = function (_236) {
        return _236;
    };
    var stateL = function (_235) {
        return _235;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_134) {
        return function (_239) {
            if (_239.length === 0) {
                return Prelude.pure(__dict_Applicative_134)([  ]);
            };
            if (_239.length >= 1) {
                var _743 = _239.slice(1);
                return Prelude["<*>"](__dict_Applicative_134["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_134["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_239[0]))(sequence(traversableArray)(__dict_Applicative_134)(_743));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_133) {
        return function (_237) {
            return function (_238) {
                if (_238.length === 0) {
                    return Prelude.pure(__dict_Applicative_133)([  ]);
                };
                if (_238.length >= 1) {
                    var _747 = _238.slice(1);
                    return Prelude["<*>"](__dict_Applicative_133["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_133["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_237(_238[0])))(traverse(traversableArray)(__dict_Applicative_133)(_237)(_747));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var zipWithA = function (__dict_Applicative_135) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_135)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var functorStateR = new Prelude.Functor(function (f) {
        return function (k) {
            return StateR.create(function (s) {
                var _748 = stateR(k)(s);
                return new Data_Tuple.Tuple(_748.value0, f(_748.value1));
            });
        };
    });
    var functorStateL = new Prelude.Functor(function (f) {
        return function (k) {
            return StateL.create(function (s) {
                var _751 = stateL(k)(s);
                return new Data_Tuple.Tuple(_751.value0, f(_751.value1));
            });
        };
    });
    var $$for = function (__dict_Applicative_140) {
        return function (__dict_Traversable_141) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_141)(__dict_Applicative_140)(f)(x);
                };
            };
        };
    };
    var applyStateR = new Prelude.Apply(function (f) {
        return function (x) {
            return StateR.create(function (s) {
                var _754 = stateR(x)(s);
                var _755 = stateR(f)(_754.value0);
                return new Data_Tuple.Tuple(_755.value0, _755.value1(_754.value1));
            });
        };
    }, function () {
        return functorStateR;
    });
    var applyStateL = new Prelude.Apply(function (f) {
        return function (x) {
            return StateL.create(function (s) {
                var _760 = stateL(f)(s);
                var _761 = stateL(x)(_760.value0);
                return new Data_Tuple.Tuple(_761.value0, _760.value1(_761.value1));
            });
        };
    }, function () {
        return functorStateL;
    });
    var applicativeStateR = new Prelude.Applicative(function () {
        return applyStateR;
    }, function (a) {
        return StateR.create(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumR = function (__dict_Traversable_136) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateR(traverse(__dict_Traversable_136)(applicativeStateR)(function (a) {
                        return StateR.create(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanr = function (__dict_Traversable_137) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumR(__dict_Traversable_137)(function (b) {
                        return function (a) {
                            var b$prime = f(a)(b);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    var applicativeStateL = new Prelude.Applicative(function () {
        return applyStateL;
    }, function (a) {
        return StateL.create(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumL = function (__dict_Traversable_138) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateL(traverse(__dict_Traversable_138)(applicativeStateL)(function (a) {
                        return StateL.create(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanl = function (__dict_Traversable_139) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumL(__dict_Traversable_139)(function (b) {
                        return function (a) {
                            var b$prime = f(b)(a);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        mapAccumL: mapAccumL, 
        mapAccumR: mapAccumR, 
        scanl: scanl, 
        scanr: scanr, 
        sequence: sequence, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableTuple: traversableTuple, 
        traverse: traverse, 
        zipWithA: zipWithA
    };
})();
var PS = PS || {};
PS.Test_Assert_AssertionError = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Maybe = PS.Data_Maybe;
    var Test_Assert_AssertionError_Foreign = PS.Test_Assert_AssertionError_Foreign;
    var Prelude = PS.Prelude;
    
function assertionErrorImpl(c, msg, props, ssf){
  var ssf = c.fromMaybe(assertionErrorImpl)(ssf);
  return new c.assertionError(msg, props, ssf);
};
    
function showAssertionErrorImpl(a){
  return a.toString();
};
    
function toJSONImpl(maybe, with_stack, assetionError){
  var json  = assetionError.toJSON(with_stack);
  var stack = json.stack ? maybe.just(json.stack) : maybe.nothing;
  json.stack = stack;
  return json;
}
;
    
function toJSONStringImpl(with_stack, assetionError){
  return JSON.stringify(assetionError.toJSON(with_stack));
};
    
function toError(ae){return ae;}
;
    var toJSONString = Data_Function.runFn2(toJSONStringImpl);
    var toJSON = Data_Function.runFn3(toJSONImpl)({
        just: Data_Maybe.Just.create, 
        nothing: Data_Maybe.Nothing.value
    });
    var showAssertionError = new Prelude.Show(showAssertionErrorImpl);
    var assertionError = Data_Function.runFn4(assertionErrorImpl)({
        fromMaybe: Data_Maybe.fromMaybe, 
        assertionError: Test_Assert_AssertionError_Foreign.assert
    });
    return {
        assertionError: assertionError, 
        showAssertionError: showAssertionError, 
        toError: toError, 
        toJSON: toJSON, 
        toJSONString: toJSONString
    };
})();
var PS = PS || {};
PS.Test_Assert_Simple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Test_Assert_AssertionError = PS.Test_Assert_AssertionError;
    var Data_String = PS.Data_String;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Function = PS.Data_Function;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function NotThrows(value0) {
        this.value0 = value0;
    };
    NotThrows.create = function (value0) {
        return new NotThrows(value0);
    };
    function Ok() {

    };
    Ok.value = new Ok();
    function NG(value0) {
        this.value0 = value0;
    };
    NG.create = function (value0) {
        return new NG(value0);
    };
    
function assertThrowsImpl(r, p, m){
  function assertThrowsImpl_Eff(){
    try {
      return r.notThrows(m());
    } catch(e){
      if(p(e)){
        return r.ok;
      } else {
        return r.ng(e);
      }
    }
  }
  return assertThrowsImpl_Eff;
};
    var when = function (b) {
        return function (a) {
            return b ? a : Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        };
    };
    var unless = function (b) {
        return when(!b);
    };
    var assertSuccess = Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
    var assertFailure = function (msg) {
        return Control_Monad_Eff_Exception.throwException(Test_Assert_AssertionError.toError(Test_Assert_AssertionError.assertionError(msg)({})(Data_Maybe.Nothing.value)));
    };
    var assertIn = function (__dict_Eq_142) {
        return function (__dict_Show_143) {
            return function (expecteds) {
                return function (actual) {
                    var msg = "expected: " + (Data_String.joinWith(" | ")(Prelude["<$>"](Data_Array.functorArray)(Prelude.show(__dict_Show_143))(expecteds)) + (" but got: " + Prelude.show(__dict_Show_143)(actual)));
                    return unless(Data_Foldable.any(Data_Foldable.foldableArray)(Prelude["=="](__dict_Eq_142)(actual))(expecteds))(assertFailure(msg));
                };
            };
        };
    };
    var assertString = function (s) {
        return unless(Data_String["null"](s))(assertFailure(s));
    };
    var assertThrows = function (p) {
        return function (m) {
            return function __do() {
                var _5 = assertThrowsImpl({
                    notThrows: NotThrows.create, 
                    ok: Ok.value, 
                    ng: NG.create
                }, p, m)();
                return (function () {
                    if (_5 instanceof NotThrows) {
                        return assertFailure("error not threw");
                    };
                    if (_5 instanceof Ok) {
                        return assertSuccess;
                    };
                    if (_5 instanceof NG) {
                        return assertFailure("not expected error is threw: " + Prelude.show(Control_Monad_Eff_Exception.showError)(_5.value0));
                    };
                    throw new Error("Failed pattern match");
                })()();
            };
        };
    };
    var assertEqual = function (__dict_Eq_144) {
        return function (__dict_Show_145) {
            return function (expected) {
                return function (actual) {
                    var msg = "expected: " + (Prelude.show(__dict_Show_145)(expected) + (" but got: " + Prelude.show(__dict_Show_145)(actual)));
                    return unless(Prelude["=="](__dict_Eq_144)(actual)(expected))(assertFailure(msg));
                };
            };
        };
    };
    var $at$eq$qmark = function (__dict_Eq_146) {
        return function (__dict_Show_147) {
            return function (expected) {
                return function (actual) {
                    return assertEqual(__dict_Eq_146)(__dict_Show_147)(expected)(actual);
                };
            };
        };
    };
    var $at$qmark$eq = function (__dict_Eq_148) {
        return function (__dict_Show_149) {
            return function (actual) {
                return function (expected) {
                    return assertEqual(__dict_Eq_148)(__dict_Show_149)(expected)(actual);
                };
            };
        };
    };
    var assertBool = function (msg) {
        return function (b) {
            return unless(b)(assertFailure(msg));
        };
    };
    return {
        "@=?": $at$eq$qmark, 
        "@?=": $at$qmark$eq, 
        assertBool: assertBool, 
        assertEqual: assertEqual, 
        assertFailure: assertFailure, 
        assertIn: assertIn, 
        assertString: assertString, 
        assertSuccess: assertSuccess, 
        assertThrows: assertThrows
    };
})();
var PS = PS || {};
PS.Test_PSpec_Types = (function () {
    "use strict";
    var Data_String = PS.Data_String;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    var ExecMode = {
        create: function (value) {
            return value;
        }
    };
    function Describe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Describe.create = function (value0) {
        return function (value1) {
            return new Describe(value0, value1);
        };
    };
    function It(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    It.create = function (value0) {
        return function (value1) {
            return new It(value0, value1);
        };
    };
    function ItAsync(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ItAsync.create = function (value0) {
        return function (value1) {
            return new ItAsync(value0, value1);
        };
    };
    function Pending(value0) {
        this.value0 = value0;
    };
    Pending.create = function (value0) {
        return new Pending(value0);
    };
    function SetMode(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetMode.create = function (value0) {
        return function (value1) {
            return new SetMode(value0, value1);
        };
    };
    function SetTimeout(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetTimeout.create = function (value0) {
        return function (value1) {
            return new SetTimeout(value0, value1);
        };
    };
    function Before(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Before.create = function (value0) {
        return function (value1) {
            return new Before(value0, value1);
        };
    };
    function After(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    After.create = function (value0) {
        return function (value1) {
            return new After(value0, value1);
        };
    };
    function BeforeEach(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BeforeEach.create = function (value0) {
        return function (value1) {
            return new BeforeEach(value0, value1);
        };
    };
    function AfterEach(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AfterEach.create = function (value0) {
        return function (value1) {
            return new AfterEach(value0, value1);
        };
    };
    function BeforeAsync(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BeforeAsync.create = function (value0) {
        return function (value1) {
            return new BeforeAsync(value0, value1);
        };
    };
    function AfterAsync(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AfterAsync.create = function (value0) {
        return function (value1) {
            return new AfterAsync(value0, value1);
        };
    };
    function BeforeEachAsync(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BeforeEachAsync.create = function (value0) {
        return function (value1) {
            return new BeforeEachAsync(value0, value1);
        };
    };
    function AfterEachAsync(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AfterEachAsync.create = function (value0) {
        return function (value1) {
            return new AfterEachAsync(value0, value1);
        };
    };
    var Spec = {
        create: function (value) {
            return value;
        }
    };
    var write = function (o) {
        return {
            a: Prelude.unit, 
            w: [ o ]
        };
    };
    var unSpec = function (_249) {
        return _249;
    };
    var skipMode = 1;
    var showExecMode = new Prelude.Show(function (_251) {
        if (_251 === 1) {
            return "Skip";
        };
        if (_251 === 2) {
            return "Only";
        };
        return "None";
    });
    var showOperation = new Prelude.Show(function (_252) {
        if (_252 instanceof Describe) {
            return Data_String.joinWith(" ")([ "Describe", Prelude.show(Prelude.showString)(_252.value0), Prelude.show(Prelude.showArray(showOperation))(_252.value1) ]);
        };
        if (_252 instanceof It) {
            return "It " + Prelude.show(Prelude.showString)(_252.value0);
        };
        if (_252 instanceof ItAsync) {
            return "ItAsync " + Prelude.show(Prelude.showString)(_252.value0);
        };
        if (_252 instanceof SetMode) {
            return Prelude.show(showExecMode)(_252.value0) + (" " + Prelude.show(Prelude.showArray(showOperation))(_252.value1));
        };
        if (_252 instanceof SetTimeout) {
            return Data_String.joinWith(" ")([ "Timeout", Prelude.show(Prelude.showNumber)(_252.value0), Prelude.show(Prelude.showArray(showOperation))(_252.value1) ]);
        };
        throw new Error("Failed pattern match");
    });
    var runSpec = function (_250) {
        return _250.w;
    };
    var onlyMode = 2;
    var noneMode = 0;
    var initialState = {
        execMode: noneMode, 
        timeout: Data_Maybe.Nothing.value
    };
    var functorSpec = new Prelude.Functor(function (_253) {
        return function (_254) {
            var _786 = {};
            for (var _787 in _254) {
                if (_254.hasOwnProperty(_787)) {
                    _786[_787] = _254[_787];
                };
            };
            _786.a = _253(_254.a);
            return _786;
        };
    });
    var execModes = {
        skip: skipMode, 
        only: onlyMode
    };
    var applySpec = new Prelude.Apply(function (_255) {
        return function (_256) {
            return {
                a: _255.a(_256.a), 
                w: Prelude["++"](Data_Array.semigroupArray)(_255.w)(_256.w)
            };
        };
    }, function () {
        return functorSpec;
    });
    var bindSpec = new Prelude.Bind(function (_257) {
        return function (_258) {
            return Spec.create((function () {
                var fa = unSpec(_258(_257.a));
                return {
                    a: fa.a, 
                    w: Prelude["++"](Data_Array.semigroupArray)(_257.w)(fa.w)
                };
            })());
        };
    }, function () {
        return applySpec;
    });
    var applicativeSpec = new Prelude.Applicative(function () {
        return applySpec;
    }, function (a) {
        return {
            a: a, 
            w: [  ]
        };
    });
    var monadSpec = new Prelude.Monad(function () {
        return applicativeSpec;
    }, function () {
        return bindSpec;
    });
    return {
        After: After, 
        AfterAsync: AfterAsync, 
        AfterEach: AfterEach, 
        AfterEachAsync: AfterEachAsync, 
        Before: Before, 
        BeforeAsync: BeforeAsync, 
        BeforeEach: BeforeEach, 
        BeforeEachAsync: BeforeEachAsync, 
        Describe: Describe, 
        It: It, 
        ItAsync: ItAsync, 
        Pending: Pending, 
        SetMode: SetMode, 
        SetTimeout: SetTimeout, 
        applicativeSpec: applicativeSpec, 
        applySpec: applySpec, 
        bindSpec: bindSpec, 
        execModes: execModes, 
        functorSpec: functorSpec, 
        initialState: initialState, 
        monadSpec: monadSpec, 
        noneMode: noneMode, 
        onlyMode: onlyMode, 
        runSpec: runSpec, 
        showExecMode: showExecMode, 
        showOperation: showOperation, 
        skipMode: skipMode, 
        write: write
    };
})();
var PS = PS || {};
PS.Test_PSpec = (function () {
    "use strict";
    var Test_PSpec_Types = PS.Test_PSpec_Types;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var setTimeout = function (to) {
        return function (sub) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.SetTimeout(to, Test_PSpec_Types.runSpec(sub)));
        };
    };
    var setMode = function (mode) {
        return function (ops) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.SetMode(mode, Test_PSpec_Types.runSpec(ops)));
        };
    };
    var skip = setMode(Test_PSpec_Types.skipMode);
    var pending = function (name) {
        return Test_PSpec_Types.write(new Test_PSpec_Types.Pending(name));
    };
    var only = setMode(Test_PSpec_Types.onlyMode);
    var itAsync = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.ItAsync(name, function (d) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(eff(d));
            }));
        };
    };
    var it = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.It(name, Prelude["void"](Control_Monad_Eff.functorEff)(eff)));
        };
    };
    var describe = function (name) {
        return function (sub) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.Describe(name, Test_PSpec_Types.runSpec(sub)));
        };
    };
    var beforeEachAsync$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.BeforeEachAsync(name, function (d) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(eff(d));
            }));
        };
    };
    var beforeEachAsync = beforeEachAsync$prime("");
    var beforeEach$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.BeforeEach(name, Prelude["void"](Control_Monad_Eff.functorEff)(eff)));
        };
    };
    var beforeEach = beforeEach$prime("");
    var beforeAsync$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.BeforeAsync(name, function (d) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(eff(d));
            }));
        };
    };
    var beforeAsync = beforeAsync$prime("");
    var before$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.Before(name, Prelude["void"](Control_Monad_Eff.functorEff)(eff)));
        };
    };
    var before = before$prime("");
    var afterEachAsync$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.AfterEachAsync(name, function (d) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(eff(d));
            }));
        };
    };
    var afterEachAsync = afterEachAsync$prime("");
    var afterEach$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.AfterEach(name, Prelude["void"](Control_Monad_Eff.functorEff)(eff)));
        };
    };
    var afterEach = afterEach$prime("");
    var afterAsync$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.AfterAsync(name, function (d) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(eff(d));
            }));
        };
    };
    var afterAsync = afterAsync$prime("");
    var after$prime = function (name) {
        return function (eff) {
            return Test_PSpec_Types.write(new Test_PSpec_Types.After(name, Prelude["void"](Control_Monad_Eff.functorEff)(eff)));
        };
    };
    var after = after$prime("");
    return {
        after: after, 
        "after'": after$prime, 
        afterAsync: afterAsync, 
        "afterAsync'": afterAsync$prime, 
        afterEach: afterEach, 
        "afterEach'": afterEach$prime, 
        afterEachAsync: afterEachAsync, 
        "afterEachAsync'": afterEachAsync$prime, 
        before: before, 
        "before'": before$prime, 
        beforeAsync: beforeAsync, 
        "beforeAsync'": beforeAsync$prime, 
        beforeEach: beforeEach, 
        "beforeEach'": beforeEach$prime, 
        beforeEachAsync: beforeEachAsync, 
        "beforeEachAsync'": beforeEachAsync$prime, 
        describe: describe, 
        it: it, 
        itAsync: itAsync, 
        only: only, 
        pending: pending, 
        setTimeout: setTimeout, 
        skip: skip
    };
})();
var PS = PS || {};
PS.Test_PSpec_Mocha = (function () {
    "use strict";
    var Data_Maybe = PS.Data_Maybe;
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Test_PSpec_Types = PS.Test_PSpec_Types;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
function describeImpl(name, test){
  return function describeImplEff(){
    describe(name, function(){test(this)()});
  }
};
    
function pendingImpl(e, mode, name){
  return function pendingImplEff(){
    if(mode === e.skip){
      it.skip(name);
    } else if(mode === e.only) {
      it.only(name);
    } else {
      it(name);
    }
  }
};
    
function itImpl(e, mode, name, test){
  return function itImplEff(){
    if(mode === e.skip){
      it.skip(name, function(){test(this)()});
    } else if(mode === e.only) {
      it.only(name, function(){test(this)()});
    } else {
      it(name, function(){test(this)()});
    }
  }
};
    
function beforeImpl(e, mode, name, hook){
  return function beforeImplEff(){
    if(name) before(name, function(){hook(this)()});
    else     before(function(){hook(this)()});
  }
};
    
function afterImpl(e, mode, name, hook){
  return function afterImplEff(){
    if(name) after(name, function(){hook(this)()});
    else     after(function(){hook(this)()});
  }
};
    
function beforeEachImpl(e, mode, name, hook){
  return function beforeEachImplEff(){
    if(name) beforeEach(name, function(){hook(this)()});
    else     beforeEach(function(){hook(this)()});
  }
};
    
function afterEachImpl(e, mode, name, hook){
  return function afterEachImplEff(){
    if(name) afterEach(name, function(){hook(this)()});
    else     afterEach(function(){hook(this)()});
  }
};
    
function itAsyncImpl(e, mode, name, test){
  return function itAsyncImplEff(){
    if(mode === e.skip){
      it.skip(name, function(done){test(this)(done)()});
    } else if(mode === e.only) {
      it.only(name, function(done){test(this)(done)()});
    } else {
      it(name, function(done){test(this)(done)()});
    }
  }
};
    
function beforeAsyncImpl(e, mode, name, hook){
  return function beforeAsyncImplEff(){
    if(name) before(name, function(done){hook(this)(done)()});
    else     before(function(done){hook(this)(done)()});
  }
};
    
function afterAsyncImpl(e, mode, name, hook){
  return function afterAsyncImplEff(){
    if(name) after(name, function(done){hook(this)(done)()});
    else     after(function(done){hook(this)(done)()});
  }
};
    
function beforeEachAsyncImpl(e, mode, name, hook){
  return function beforeEachAsyncImplEff(){
    if(name) beforeEach(name, function(done){hook(this)(done)()});
    else     beforeEach(function(done){hook(this)(done)()});
  }
};
    
function afterEachAsyncImpl(e, mode, name, hook){
  return function afterEachAsyncImplEff(){
    if(name) afterEach(name, function(done){hook(this)(done)()});
    else     afterEach(function(done){hook(this)(done)()});
  }
};
    
function setTimeoutImpl(_this, to){
  return function setTimeoutImplEff(){
    _this.timeout(to);
  }
};
    
function itIs(done){
  return function itIsEff(){
    done();
  }
};
    
function itIsNot(done){
  return function itIsNotMsg(msg){
    return function itIsNotEff(){
      done(msg);
    }
  }
};
    var setTO = function ($$this) {
        return function (to) {
            return Data_Maybe.maybe(Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit))(Data_Function.runFn2(setTimeoutImpl)($$this))(to);
        };
    };
    var runMocha$prime = function (_259) {
        return function (_260) {
            if (_260.length === 0) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
            };
            if (_260.length >= 1) {
                var _797 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.Describe) {
                    return function __do() {
                        describeImpl((_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return runMocha$prime(_259)((_260[0]).value1)();
                            };
                        })();
                        return runMocha$prime(_259)(_797)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _800 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.Pending) {
                    return function __do() {
                        pendingImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0)();
                        return runMocha$prime(_259)(_800)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _804 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.It) {
                    return function __do() {
                        itImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return (_260[0]).value1();
                            };
                        })();
                        return runMocha$prime(_259)(_804)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _808 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.ItAsync) {
                    return function __do() {
                        itAsyncImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function (done) {
                                return function __do() {
                                    setTO($$this)(_259.timeout)();
                                    return (_260[0]).value1(done)();
                                };
                            };
                        })();
                        return runMocha$prime(_259)(_808)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _814 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.SetMode) {
                    return function __do() {
                        runMocha$prime((function () {
                            var _809 = {};
                            for (var _810 in _259) {
                                if (_259.hasOwnProperty(_810)) {
                                    _809[_810] = _259[_810];
                                };
                            };
                            _809.execMode = (_260[0]).value0;
                            return _809;
                        })())((_260[0]).value1)();
                        return runMocha$prime(_259)(_814)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _820 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.SetTimeout) {
                    return function __do() {
                        runMocha$prime((function () {
                            var _815 = {};
                            for (var _816 in _259) {
                                if (_259.hasOwnProperty(_816)) {
                                    _815[_816] = _259[_816];
                                };
                            };
                            _815.timeout = new Data_Maybe.Just((_260[0]).value0);
                            return _815;
                        })())((_260[0]).value1)();
                        return runMocha$prime(_259)(_820)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _824 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.Before) {
                    return function __do() {
                        beforeImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return (_260[0]).value1();
                            };
                        })();
                        return runMocha$prime(_259)(_824)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _828 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.After) {
                    return function __do() {
                        afterImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return (_260[0]).value1();
                            };
                        })();
                        return runMocha$prime(_259)(_828)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _832 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.BeforeEach) {
                    return function __do() {
                        beforeEachImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return (_260[0]).value1();
                            };
                        })();
                        return runMocha$prime(_259)(_832)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _836 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.AfterEach) {
                    return function __do() {
                        afterEachImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function __do() {
                                setTO($$this)(_259.timeout)();
                                return (_260[0]).value1();
                            };
                        })();
                        return runMocha$prime(_259)(_836)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _840 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.BeforeAsync) {
                    return function __do() {
                        beforeAsyncImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function (done) {
                                return function __do() {
                                    setTO($$this)(_259.timeout)();
                                    return (_260[0]).value1(done)();
                                };
                            };
                        })();
                        return runMocha$prime(_259)(_840)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _844 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.AfterAsync) {
                    return function __do() {
                        afterAsyncImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function (done) {
                                return function __do() {
                                    setTO($$this)(_259.timeout)();
                                    return (_260[0]).value1(done)();
                                };
                            };
                        })();
                        return runMocha$prime(_259)(_844)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _848 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.BeforeEachAsync) {
                    return function __do() {
                        beforeEachAsyncImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function (done) {
                                return function __do() {
                                    setTO($$this)(_259.timeout)();
                                    return (_260[0]).value1(done)();
                                };
                            };
                        })();
                        return runMocha$prime(_259)(_848)();
                    };
                };
            };
            if (_260.length >= 1) {
                var _852 = _260.slice(1);
                if (_260[0] instanceof Test_PSpec_Types.AfterEachAsync) {
                    return function __do() {
                        afterEachAsyncImpl(Test_PSpec_Types.execModes, _259.execMode, (_260[0]).value0, function ($$this) {
                            return function (done) {
                                return function __do() {
                                    setTO($$this)(_259.timeout)();
                                    return (_260[0]).value1(done)();
                                };
                            };
                        })();
                        return runMocha$prime(_259)(_852)();
                    };
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    var runMocha = function (s) {
        return runMocha$prime(Test_PSpec_Types.initialState)(Test_PSpec_Types.runSpec(s));
    };
    return {
        itIs: itIs, 
        itIsNot: itIsNot, 
        runMocha: runMocha
    };
})();
var PS = PS || {};
PS.Test_Main = (function () {
    "use strict";
    var Test_PSpec_Mocha = PS.Test_PSpec_Mocha;
    var Prelude = PS.Prelude;
    var Test_PSpec = PS.Test_PSpec;
    var Debug_Trace = PS.Debug_Trace;
    var Test_Assert_Simple = PS.Test_Assert_Simple;
    var Control_Timer = PS.Control_Timer;
    var Test_PSpec_Types = PS.Test_PSpec_Types;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var main = Test_PSpec_Mocha.runMocha(Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.before(Debug_Trace.trace("before called")))(function () {
        return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.after(Debug_Trace.trace("after called")))(function () {
            return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.beforeEach(Debug_Trace.trace("before each called")))(function () {
                return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.afterEach(Debug_Trace.trace("after each called")))(function () {
                    return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.beforeAsync(function (done) {
                        return function __do() {
                            var _ = Debug_Trace.trace("beforeAsync called")();
                            return Test_PSpec_Mocha.itIs(done)();
                        };
                    }))(function () {
                        return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.afterAsync(function (done) {
                            return function __do() {
                                var _ = Debug_Trace.trace("afterAsync called")();
                                return Test_PSpec_Mocha.itIs(done)();
                            };
                        }))(function () {
                            return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.beforeEachAsync(function (done) {
                                return function __do() {
                                    var _ = Debug_Trace.trace("beforeEachAsync called")();
                                    return Test_PSpec_Mocha.itIs(done)();
                                };
                            }))(function () {
                                return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.afterEachAsync(function (done) {
                                    return function __do() {
                                        var _ = Debug_Trace.trace("afterEachAsync called")();
                                        return Test_PSpec_Mocha.itIs(done)();
                                    };
                                }))(function () {
                                    return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.describe("title")(Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.it("success")(Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit)))(function () {
                                        return Test_PSpec.itAsync("async success")(function (done) {
                                            return Test_PSpec_Mocha.itIs(done);
                                        });
                                    })))(function () {
                                        return Test_PSpec.describe("title2")(Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.pending("pending"))(function () {
                                            return Prelude[">>="](Test_PSpec_Types.bindSpec)(Test_PSpec.skip(Test_PSpec.it("failure")(Test_Assert_Simple.assertFailure("failure"))))(function () {
                                                return Test_PSpec.describe("nested")(Test_PSpec.setTimeout(5000)(Test_PSpec.itAsync("long time")(function (done) {
                                                    return Control_Timer.timeout(3000)(Test_PSpec_Mocha.itIsNot(done)("failed"));
                                                })));
                                            });
                                        }));
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }));
    return {
        main: main
    };
})();
PS.Test_Main.main();

